"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/triage/page",{

/***/ "(app-pages-browser)/./src/hooks/usePatientsPersistent.ts":
/*!********************************************!*\
  !*** ./src/hooks/usePatientsPersistent.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePatientsPersistent: () => (/* binding */ usePatientsPersistent)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _usePatientStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./usePatientStore */ \"(app-pages-browser)/./src/hooks/usePatientStore.ts\");\n\n\nconst usePatientsPersistent = ()=>{\n    const store = (0,_usePatientStore__WEBPACK_IMPORTED_MODULE_1__.usePatientStore)();\n    // Sync with server on mount (optional - you can implement server sync here)\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"usePatientsPersistent.useEffect\": ()=>{\n        // If you want to sync with your MCP server on load, you can add that logic here\n        // For example:\n        // syncWithServer();\n        }\n    }[\"usePatientsPersistent.useEffect\"], []);\n    const addPatient = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"usePatientsPersistent.useCallback[addPatient]\": async (patient)=>{\n            try {\n                // Add to local store immediately for optimistic updates\n                store.addPatient(patient);\n                console.log('Patient added to persistent store:', patient);\n            } catch (error) {\n                console.error('Failed to add patient locally:', error);\n            }\n        }\n    }[\"usePatientsPersistent.useCallback[addPatient]\"], [\n        store\n    ]);\n    const updatePatient = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"usePatientsPersistent.useCallback[updatePatient]\": async (patientId, updates)=>{\n            try {\n                // Update local store immediately\n                store.updatePatient(patientId, updates);\n                console.log('Patient updated in persistent store:', patientId, updates);\n            } catch (error) {\n                console.error('Failed to update patient locally:', error);\n            }\n        }\n    }[\"usePatientsPersistent.useCallback[updatePatient]\"], [\n        store\n    ]);\n    const removePatient = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"usePatientsPersistent.useCallback[removePatient]\": async (patientId)=>{\n            try {\n                store.removePatient(patientId);\n                console.log('Patient removed from persistent store:', patientId);\n            } catch (error) {\n                console.error('Failed to remove patient:', error);\n            }\n        }\n    }[\"usePatientsPersistent.useCallback[removePatient]\"], [\n        store\n    ]);\n    const syncWithServer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"usePatientsPersistent.useCallback[syncWithServer]\": async ()=>{\n            try {\n                // Fetch patients from your MCP server\n                const response = await fetch('http://localhost:3001/api/patients');\n                if (response.ok) {\n                    const data = await response.json();\n                    if (data.patients) {\n                        store.setPatients(data.patients);\n                        console.log('Successfully synced with server:', data.patients.length, 'patients');\n                    }\n                }\n            } catch (error) {\n                console.error('Failed to sync with server:', error);\n            }\n        }\n    }[\"usePatientsPersistent.useCallback[syncWithServer]\"], [\n        store\n    ]);\n    const addPatientWithSync = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"usePatientsPersistent.useCallback[addPatientWithSync]\": async (patient)=>{\n            try {\n                // Add to local store immediately for optimistic updates\n                store.addPatient(patient);\n                // Sync with MCP server\n                const response = await fetch('http://localhost:3001/api/patients', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(patient)\n                });\n                if (response.ok) {\n                    console.log('Patient synced with server:', patient);\n                } else {\n                    console.warn('Failed to sync patient with server, but stored locally');\n                }\n            } catch (error) {\n                console.error('Failed to sync with server, but patient stored locally:', error);\n            }\n        }\n    }[\"usePatientsPersistent.useCallback[addPatientWithSync]\"], [\n        store\n    ]);\n    const updatePatientWithSync = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"usePatientsPersistent.useCallback[updatePatientWithSync]\": async (patientId, updates)=>{\n            try {\n                // Update local store immediately\n                store.updatePatient(patientId, updates);\n                // Sync with MCP server if it's a status update\n                if (updates.status) {\n                    const response = await fetch(\"http://localhost:3001/api/patients/\".concat(patientId, \"/status\"), {\n                        method: 'PUT',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            status: updates.status\n                        })\n                    });\n                    if (response.ok) {\n                        console.log('Patient status synced with server:', patientId, updates.status);\n                    }\n                }\n            } catch (error) {\n                console.error('Failed to sync patient update with server:', error);\n            }\n        }\n    }[\"usePatientsPersistent.useCallback[updatePatientWithSync]\"], [\n        store\n    ]);\n    const clearAllPatients = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"usePatientsPersistent.useCallback[clearAllPatients]\": ()=>{\n            store.clearAllPatients();\n        }\n    }[\"usePatientsPersistent.useCallback[clearAllPatients]\"], [\n        store\n    ]);\n    return {\n        // State from store\n        patients: store.patients,\n        lastUpdated: store.lastUpdated,\n        // Sorted/filtered data\n        sortedPatients: store.getSortedPatients(),\n        waitingPatients: store.getPatientsByStatus('waiting'),\n        inTreatmentPatients: store.getPatientsByStatus('in-treatment'),\n        completedPatients: store.getPatientsByStatus('completed'),\n        // Actions\n        addPatient,\n        updatePatient,\n        removePatient,\n        clearAllPatients,\n        syncWithServer,\n        // Server-synced actions\n        addPatientWithSync,\n        updatePatientWithSync,\n        // Direct store actions (for advanced use)\n        setPatients: store.setPatients\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/usePatientsPersistent.ts\n"));

/***/ })

});